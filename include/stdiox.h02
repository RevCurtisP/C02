/******************************************
 * stdiox - Extended I/O Routines for C02 *
 ******************************************/

/* Any Key                                 *
 *   Displays "Press any key to continue"  *
 *   prompt and wait for key to be pressed *
 * Returns: char c - ASCII Value of Key    */
void anykey();

/* Get Character with Prompt            *
 *   Displays prompt and waits for key  * 
 *   to be pressed                      *
 * Args: int &s - Prompt                *
 * Returns: char c - ASCII Value of Key */
void getcpr();

/* Print Formatted                      *
 *   Prints char value, and/or contents *
 *   of dstptr on screen formatted by   *
 * Args: char c  - Character to Format  *
 *       int &s - Formatting String     */
void printf();

/* Put Binary                     *
 *   Prints byte as binary number *
 * Args: char b - Number to Print */
void putbin(); 

/* Put Decimal                     *
 *   Prints byte as decimal number *
 * Args: char b - Number to Print  */
void putdec(); 

/* Put Decimal Hundred                *
 *   Prints Byte Modulo 100 as two    *
 *   digit zero-filled decimal number *
 * Args: char b - Number to Print     */
void putdeh(); 

/* Put Decimal Left Justified        *
 *   Prints byte as decimal number,  *
 *   right-padded with spaces, for a *
 *   total of three charcaters       *
 * Args: char b - Number to Print    */
void putdel(); 

/* Put Decimal Right Justified      *
 *   Prints byte as decimal number, *
 *   left-padded with spaces, for a *
 *   total of three charcaters      *
 * Args: char b - Number to Print   */
void putder(); 

/* Put Decimal Zero-Filled           *
 *   Prints byte as decimal number,  *
 *   left-padded with zeroes,  for a *
 *   total of three charcaters       *
 * Args: char b - Number to Print    */
void putdez(); 

/* Print Destination String           *        
 *   Prints string with               *
 *   address in dstptr                *      
 * Return: char n: Characters Printed */
void putdst(); 

/* Put Extended Hexadecimal            *
 *   Prints 24-bit value as six digit  *
 *   hexadecimal number                *
 * Args: char n - High Byte            *
 *        int w - Middle and Low Bytes */
void putexh(); 

/* Put Hexadecimal              *
 *   Prints byte as two digit   *
 *   hexadecimal number         *
 * Args: char b - Byte to Print */
void puthex(); 

/* Put Integer                    *
 *  Prints word as decimal number *
 * Args: int w - Word to Print */
void putint();

/* Put Mask                       *
 *   Prints byte as binary number *
 *   with bits specified by mask  *
 * Args: char b - Byte to Print   *
 *       char m - Bit Mask        */
void putmsk(); 

/* Put Nybble                   *
 *   Prints low nybble of byte  *
 *   as hexadecimal digit       *
 * Args: char b - Byte to Print */
void putnyb(); 

/* Put Space                 *
 *  Prints a space character */
void putspc(); 

/* Put Sesquibyte                     *
 *   Prints low three nybbles of word *
 *   as three hexadecimal digits      *
 * Args: int w - Word to Print        */
void putsqb(); 

/* Put Word                    *
 *   Prints word as four-digit *
 *   hexadecimal number        *
 * Args: int w - Word to Print */
void putwrd(); 

